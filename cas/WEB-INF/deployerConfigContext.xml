<?xml version="1.0" encoding="UTF-8"?>
<!-- | deployerConfigContext.xml centralizes into one file some of the declarative 
	configuration that | all CAS deployers will need to modify. | | This file 
	declares some of the Spring-managed JavaBeans that make up a CAS deployment. 
	| The beans declared in this file are instantiated at context initialization 
	time by the Spring | ContextLoaderListener declared in web.xml. It finds 
	this file because this | file is among those declared in the context parameter 
	"contextConfigLocation". | | By far the most common change you will need 
	to make in this file is to change the last bean | declaration to replace 
	the default SimpleTestUsernamePasswordAuthenticationHandler with | one implementing 
	your approach for authenticating usernames and passwords. + -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	<!-- | This bean declares our AuthenticationManager. The CentralAuthenticationService 
		service bean | declared in applicationContext.xml picks up this AuthenticationManager 
		by reference to its id, | "authenticationManager". Most deployers will be 
		able to use the default AuthenticationManager | implementation and so do 
		not need to change the class of this bean. We include the whole | AuthenticationManager 
		here in the userConfigContext.xml so that you can see the things you will 
		| need to change in context. + -->
	<bean id="authenticationManager" class="org.jasig.cas.authentication.AuthenticationManagerImpl">
		<!-- | This is the List of CredentialToPrincipalResolvers that identify 
			what Principal is trying to authenticate. | The AuthenticationManagerImpl 
			considers them in order, finding a CredentialToPrincipalResolver which | 
			supports the presented credentials. | | AuthenticationManagerImpl uses these 
			resolvers for two purposes. First, it uses them to identify the Principal 
			| attempting to authenticate to CAS /login . In the default configuration, 
			it is the DefaultCredentialsToPrincipalResolver | that fills this role. If 
			you are using some other kind of credentials than UsernamePasswordCredentials, 
			you will need to replace | DefaultCredentialsToPrincipalResolver with a CredentialsToPrincipalResolver 
			that supports the credentials you are | using. | | Second, AuthenticationManagerImpl 
			uses these resolvers to identify a service requesting a proxy granting ticket. 
			| In the default configuration, it is the HttpBasedServiceCredentialsToPrincipalResolver 
			that serves this purpose. | You will need to change this list if you are 
			identifying services by something more or other than their callback URL. 
			+ -->
		<property name="credentialsToPrincipalResolvers">
			<list>
				<!-- | UsernamePasswordCredentialsToPrincipalResolver supports the UsernamePasswordCredentials 
					that we use for /login | by default and produces SimplePrincipal instances 
					conveying the username from the credentials. | | If you've changed your LoginFormAction 
					to use credentials other than UsernamePasswordCredentials then you will also 
					| need to change this bean declaration (or add additional declarations) to 
					declare a CredentialsToPrincipalResolver that supports the | Credentials 
					you are using. + -->
				<bean
					class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver">
					<property name="attributeRepository">
						<ref local="attributeRepository" />
					</property>
				</bean>
				<!-- | HttpBasedServiceCredentialsToPrincipalResolver supports HttpBasedCredentials. 
					It supports the CAS 2.0 approach of | authenticating services by SSL callback, 
					extracting the callback URL from the Credentials and representing it as a 
					| SimpleService identified by that callback URL. | | If you are representing 
					services by something more or other than an HTTPS URL whereat they are able 
					to | receive a proxy callback, you will need to change this bean declaration 
					(or add additional declarations). + -->
				<bean
					class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
			</list>
		</property>

		<!-- | Whereas CredentialsToPrincipalResolvers identify who it is some 
			Credentials might authenticate, | AuthenticationHandlers actually authenticate 
			credentials. Here we declare the AuthenticationHandlers that | authenticate 
			the Principals that the CredentialsToPrincipalResolvers identified. CAS will 
			try these handlers in turn | until it finds one that both supports the Credentials 
			presented and succeeds in authenticating. + -->
		<property name="authenticationHandlers">
			<list>
				<!-- | This is the authentication handler that authenticates services 
					by means of callback via SSL, thereby validating | a server side SSL certificate. 
					+ -->
				<bean
					class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
					p:httpClient-ref="httpClient" p:requireSecure="false" />
				<!-- | This is the authentication handler declaration that every CAS 
					deployer will need to change before deploying CAS | into production. The 
					default SimpleTestUsernamePasswordAuthenticationHandler authenticates UsernamePasswordCredentials 
					| where the username equals the password. You will need to replace this with 
					an AuthenticationHandler that implements your | local authentication strategy. 
					You might accomplish this by coding a new such handler and declaring | edu.someschool.its.cas.MySpecialHandler 
					here, or you might use one of the handlers provided in the adaptors modules. 
					+ -->
				<!-- 配置用户验证，验证方式可以配置多个。 只要有一个验证成功就会退出 -->
				<!-- 
				<bean
					class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler">
					<property name="sql"
						value="select password from appuser where username=?" />
					<property name="dataSource" ref="dataSource" />
				 -->
					<!-- <property name="passwordEncoder" ref="myPasswordEncoder"/> -->
				<!-- 
				</bean>
				-->
				
				<bean class="com.e9rj.cas.auth.UserLoginHandler"/>
			</list>
		</property>
	</bean>

	<!-- 数据源配置 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<property name="url">
			<value>jdbc:mysql://localhost:3306/sso?useUnicode=true&amp;characterEncoding=UTF-8
			</value>
		</property>
		<property name="username">
			<value>root</value>
		</property>
		<property name="password">
			<value>654321</value>
		</property>
	</bean>
	<!-- 加密机制 -->
	<!-- <bean id="myPasswordEncoder" class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder"> 
		<constructor-arg value="MD5"/> </bean> -->
	<!-- This bean defines the security roles for the Services Management application. 
		Simple deployments can use the in-memory version. More robust deployments 
		will want to use another option, such as the Jdbc version. The name of this 
		should remain "userDetailsService" in order for Spring Security to find it. -->
	<!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" 
		/> -->

	<sec:user-service id="userDetailsService">
		<sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused"
			authorities="ROLE_ADMIN" />
	</sec:user-service>

	<!-- 在这里配置获取更多的信息 -->
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
		<constructor-arg index="0" ref="dataSource" />
		<constructor-arg index="1" value="select * from V_OP_PERSON where {0}" /><!-- 注意，这里不能像网上说的写2个参数 {0} {1},只能写一个参数，后台会自动组装 -->
		<property name="queryAttributeMapping">
			<map>
				<entry key="username" value="OPNO" /><!-- 这里的key需写username，value对应数据库用户名字段 -->
				<entry key="deptid" value="DEPT_ID" />
			</map>
		</property>
		<property name="queryType">
			<value>AND</value>
		</property>
		<!-- 要获取的属性在这里配置 -->
		<property name="resultAttributeMapping">
			<map>
				<entry key="OPNO" value="OPNO" /><!-- key为数据库字段名 -->
				<entry key="OPNAME" value="OPNAME" />
				<entry key="ORGCODE" value="ORGCODE" />
				<entry key="ORG_NAME" value="ORG_NAME" />
				<entry key="DEPT_ID" value="DEPT_ID" />
				<entry key="DEPT_NAME" value="DEPT_NAME" />
				<entry key="APP_CODE" value="APP_CODE" />
				<entry key="ENABLED" value="ENABLED" />
				<entry key="SEC_LEVEL" value="SEC_LEVEL" />
				<entry key="RANK_LEVEL" value="RANK_LEVEL" />
				<!-- <entry key="IMGDATA" value="IMGDATA" /> -->
				<entry key="IMGTYPE" value="IMGTYPE" />
				<entry key="PERSON_ID" value="PERSON_ID" />
				<entry key="PREVLOGINTIME" value="PREVLOGINTIME" />
				<entry key="PREVLOGINIP" value="PREVLOGINIP" />
				<entry key="LASTLOGINIP" value="LASTLOGINIP" />
				<entry key="LOGINTIMES" value="LOGINTIMES" />
				<entry key="USERTYPE" value="USERTYPE" />
			</map>
		</property>
	</bean>

	<!-- Sample, in-memory data store for the ServiceRegistry. A real implementation 
		would probably want to replace this with the JPA-backed ServiceRegistry DAO 
		The name of this bean should remain "serviceRegistryDao". -->
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
	</bean>
</beans>